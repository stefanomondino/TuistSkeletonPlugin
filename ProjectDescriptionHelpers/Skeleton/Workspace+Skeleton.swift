//
//  Workspace+Skeleton.swift
//  ProjectDescriptionHelpers
//
//  Created by Stefano Mondino on 02/01/23.
//

import Foundation
import ProjectDescription

public extension Workspace {
    static func environmentTemplates(for appModules: [any AppModule]) -> [Template.Item] {
        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted

        return appModules.compactMap { app in

            guard let data = try? encoder.encode(app),
                  let string = String(data: data,
                                      encoding: .utf8) else {
                return nil
            }
            let path = "\(app.path.pathString)/Sources/Environments/\(app.name)/Environment.environment"
            return ProjectDescription.Template.Item
                .string(path: path,
                        contents: string)
        }
    }

    static func project(projectName: String,
                        organizationName: String,
                        modules: [ProjectConvertible],
                        testModules: [Skeleton.TestModule]) -> Project {
        let projects: [ProjectConvertible] = modules + testModules

        let targets = projects.flatMap { $0.targets() }

        return Project(
            name: projectName,
            organizationName: organizationName,
            options: .options(),
            settings: .settings(base: ["MARKETING_VERSION":
                    "\(ProjectDescription.Environment.versionName.getString(default: "1.0.0"))"]),
            targets: targets,
            resourceSynthesizers: [.environment, .plists(), .fonts()]
        )
    }

    static func workspaceWithProject(projectName: String,
                                     testModules _: [Skeleton.TestModule],
                                     appModules _: [ProjectConvertible]) -> Workspace {
        Workspace(name: projectName,
                  projects: [.relativeToRoot("Sources/*")],
                  generationOptions: .options(enableAutomaticXcodeSchemes: false,
                                              autogeneratedWorkspaceSchemes: .enabled(codeCoverageMode: .all,
                                                                                      testingOptions: .parallelizable,
                                                                                      testLanguage: nil,
                                                                                      testRegion: nil,
                                                                                      testScreenCaptureFormat: nil),
                                              lastXcodeUpgradeCheck: .init(15, 2, 0),
                                              renderMarkdownReadme: true))
    }

    static func workspace(projectName: String,
                          modules: [ProjectConvertible],
                          testModules: [Skeleton.TestModule]) -> Workspace {
        let projects: [ProjectConvertible] = modules + testModules

        //       let platforms = Set(projects.flatMap { $0.destinations.platforms })

        let testableProjects = projects
            //                .filter { $0.destinations.platforms.contains(platform) }
            .filter { $0.testInfo().isTestable }

        //            let platformName = "\(platform)"

        let targets: [TargetReference] = testableProjects
            .map { .project(path: $0.path,
                            target: $0.testInfo().testTargetName) }

        let testableTargets: [TestableTarget] = testableProjects.map {
            .testableTarget(target: .project(path: $0.path,
                                             target: $0.testInfo().testTargetName),
                            isParallelizable: $0.testInfo().isParallel)
        }

        let codeCoverageTargets: [TargetReference] = testableProjects
            .map { .project(path: $0.path,
                            target: $0.testInfo().targetName) }

        let testScheme = Scheme.scheme(name: "AllTests",
                                       shared: true,
                                       hidden: false,
                                       buildAction: .buildAction(targets: targets),
                                       testAction: .targets(
                                           testableTargets,
                                           options: .options(coverage: true,
                                                             codeCoverageTargets: codeCoverageTargets)
                                       ),
                                       runAction: .runAction(configuration: .debug),
                                       archiveAction: .archiveAction(configuration: .release),
                                       profileAction: .profileAction(configuration: .debug),
                                       analyzeAction: .analyzeAction(configuration: .debug))

        return Workspace(name: projectName,
                         projects: projects.map { $0.path },
                         schemes: [testScheme],
                         generationOptions: .options(enableAutomaticXcodeSchemes: false,
                                                     autogeneratedWorkspaceSchemes: .enabled(codeCoverageMode: .all,
                                                                                             testingOptions: .parallelizable,
                                                                                             testLanguage: nil,
                                                                                             testRegion: nil,
                                                                                             testScreenCaptureFormat: nil),
                                                     lastXcodeUpgradeCheck: .init(15, 4, 0),
                                                     renderMarkdownReadme: true))
    }
}
